Reference: https://www.indeed.com/career-advice/career-development/oop-terminology

What is OOP?
Object-oriented programming is a software programming approach that uses data, or objects, as its primary structural element. Other programming approaches might use logic or functions as their primary structures. Examples of programming languages that use the OOP approach include C++, Python and R.
This software programming approach might be suitable for large programs, mobile applications or projects that involve collaboration because it's easy to scale this approach to meet the needs of a program.

Why is OOP terminology important?
Learning about common terminology used in object-oriented programming can help you learn the basic concepts of this programming approach. This foundational knowledge can help you if you choose to take a class in an OOP coding language.
Gaining an understanding of OOP terminology can also help you communicate with programmers and UX designers, which can be helpful for professionals who work in fields related to software engineering, like project management or administration.

12 OOP terms
Here are 12 OOP terms that might help you better understand this programming approach:
1. Objects
Objects are the basic units of code used to create software applications in OOP languages. All OOP languages use objects to build programs because they're easy to replicate and scale. An object can be any abstract data type that has specific characteristics and functions. For example, a specific user account in an online database is an object. This object has its own unique characteristics and can perform certain functions, like browsing or editing articles.
2. Classes
Classes are the parameters that help a program create objects. While all OOP coding languages support objects, not all of them have classes. Many coding languages support both objects and classes. Each class has its own set of qualifications, and individual objects have unique data for each qualification.
For example, in an online soccer game, there might be a class that defines the set of player characters users can choose. The class might have attributes like hair color, jersey color and height. Individual playable characters are objects within that class.
3. Attributes
Attributes are the characteristics of an object that define what it is. Classes determine which attributes an object has. For example, if we consider a class of humans, their attributes might include name, hair color and height. Individual humans, or objects, have unique entries for each attribute field.
A human named John, with brown hair and a height of 5 feet 8 inches, is distinct from a human named Brenda, with blonde hair and a height of 5 feet 10 inches, but they're both in the same class.
Related: Technology Jargon: 100 Terms To Know
4. Behaviors
Behaviors, or functions, are the actions that an object can perform. These might be a range of functions that a piece of code can do in response to a query or other action. While attributes are descriptive items, like nouns and adjectives, behaviors tend to be verbs. For example, playable characters in an electronic soccer game might have a range of potential behaviors, like kicking, passing or guarding.
5. Methods
Methods are functions and subroutines that define the behavior of a class or objects within that class. Typically, methods are specific to a class or object, and they determine how an object might use or modify data. If an object belongs to a class, the class's methods might override the object's methods and change or enhance how objects in the class use data or respond to commands.
6. Constructor
A constructor is a specialized subroutine that programmers use to create objects. In languages that support classes, constructors often use the class's parameters to create new objects within that class. There are special types of constructors, like copy constructors and conversion constructors, that create specific types of objects or use certain rules to create the objects. For example, a copy constructor replicates a copy of an existing object within that class.
7. Abstraction
Abstraction involves adding structure to an object or class so that the end-user only sees an interface, rather than the entire inner code. This process is valuable for many types of engineering because it makes devices and applications easier for the average user.
Programs can be complex, so choosing the information to display can allow a UX designer or developer to shape the user's experience using the program. For example, a social networking program might use complex algorithms to recommend connections between users, but the users might only see a button that shows them their recommended matches.
8. Encapsulation
Programmers use encapsulation to protect certain information within a class from the rest of the code. They can hide specific attributes within the object and restrict access to the attribute to members of a certain class or subclass. For example, a user account on a website might include sensitive information, like social security numbers or home addresses. These attributes can be encapsulated so that only certain classes can access the information.
9. Inheritance
If an OOP language supports classes, then it probably also uses the concept of inheritance to organize classes. Inheritance allows programmers to relate certain classes to one another, providing structure within the program. In this structure, some classes are "parents," while others are "children."
You might also call a parent class a "superclass" and a child class a "subclass." For example, in an inventory database, you might have a superclass labeled "Books" with two subclasses, "Paperbacks" and "Hardcovers." All subclasses have the same characteristics as their parent class, but they also have their own unique characteristics.
Related: 41 Top OOPs Interview Questions (With Example Answers)
10. Polymorphism
Polymorphism relates to the ability of different subclasses in a hierarchy to respond to the same command in their own ways. A hierarchy is a set of classes that relate to each other under the principle of inheritance. For example, you might have a superclass called "Shapes," with subclasses for "Circles" and "Squares."
If you send a command to the superclass to draw the shapes, polymorphism allows the "Circle" and "Square" subclasses to create different shapes, based on their own attributes. Polymorphism is useful because it allows programmers to create lots of commands without replicating work.
11. Instance
An instance is the use of an object within a specific class. In many coding languages, it's the same thing as an object, but the term "instance" refers to the relationship between the object and its class. The process of creating an instance is called instantiation. Instances also often have timestamps or memory locations, so they show the state of the class or object at a certain time.
Related: 50 Object Oriented Programming Interview Questions
12. Object lifetime
The object lifetime, or object lifecycle, is the series of events between the creation and destruction of an object. The length of an object's lifetime depends on the type of language used to create it, the parameters of the program and other factors.
During the first stage of an object's lifetime, the constructor calculates how much space the object needs and allocates the correct amount of memory. Next, during the initialization process, the constructor creates the superclass or individual object. During the destruction process, a destructor subroutine decompiles the object and frees up the memory.


Key Difference Between OOP and POP
The main purpose of OOP is on Data Security, whereas the main focus of POP is on how to get the task done. 
OOP is Object-Oriented Programming, and POP is Procedure-Oriented Programming.
OOP has three accessing modes: “Public”, “Private”, and “Protected,” while POP has no specific accessing modes.
POP doesn’t support inheritance, while OOP supports inheritance that allows using attributes and functions of other classes by inheriting.
In OOP, the virtual function supports polymorphism, whereas there is no concept of virtual function in POP. 
